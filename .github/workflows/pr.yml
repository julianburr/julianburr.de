name: Deploy Preview

on: "pull_request"

jobs:
  deploy_staging:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.x"

      - name: Install dependencies
        run: |-
          yarn

      - name: Linting and typechecks
        run: |-
          yarn lint
          yarn typecheck

      - name: Create github deployment
        id: deployment
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_PAT }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              ...context.repo,
              ref: "${{ github.event.pull_request.head.sha }}",
              required_contexts: [],
              environment: "Preview"
            });
            core.setOutput("id", deployment.data.id);

      - name: Deploy via vercel
        id: vercel
        run: |-
          mkdir .vercel
          echo '{ "projectId": "${{ secrets.VERCEL_PROJECT_ID }}", "orgId": "${{ secrets.VERCEL_ORG_ID}}" }' \
            > .vercel/project.json

          vercel --token=${{ secrets.VERCEL_TOKEN }} > url.txt
          echo "::set-output name=url::$(cat url.txt)"

      - name: Add comment with deployment url
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;

            const comments = await github.rest.issues.listComments({issue_number, owner, repo});
            const comment = comments.data.find(comment => comment.body.startsWith('<!-- automated PR comment -->'));
            if (comment) {
              github.rest.issues.deleteComment({issue_number, owner, repo, comment_id: comment.id});
            }

            const body = `<!-- automated PR comment -->\n\nPR has been deployed to: ${{ steps.vercel.outputs.url }}`
            github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body
            });

      - name: On success
        if: success()
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              ...context.repo,
              deployment_id: '${{ steps.deployment.outputs.id }}',
              state: 'success',
              environment_url: "${{ steps.vercel.outputs.url }}",
              description: `Preview deployed to ${{ steps.vercel.outputs.url }}`,
            });

      - name: On error
        if: failure() || cancelled()
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.repos.createDeploymentStatus({
              ...context.repo,
              deployment_id: '${{ steps.deployment.outputs.id }}',
              state: 'failure'
            });
